'use strict';

/**
Выведите столбец чисел от 1 до 50. (while)

*/

/**
Дан массив с элементами [1, 2, 3, 4, 5]. С помощью цикла for выведите все эти элементы на экран.
*/

/**
Дан массив с элементами [2, 3, 4, 5]. С помощью цикла for найдите произведение элементов этого массива.
*/

/**
Дан объект obj с ключами 'Минск', 'Москва', 'Киев' с элементами 'Беларусь', 'Россия', 'Украина'. С помощью цикла for-in выведите на экран строки такого формата: 'Минск - это Беларусь.'.
*/

/**
Дан массив с элементами 2, 5, 9, 15, 0, 4. С помощью цикла for и оператора if выведите на экран столбец тех элементов массива, которые больше 3-х, но меньше 10.
*/

/**
Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.
*/

/**
Дан массив с элементами 1, 2, 5, 9, 4, 13, 4, 10. С помощью цикла for и оператора if проверьте есть ли в массиве элемент со значением, равным 4. Если есть - выведите на экран 'Есть!' и выйдите из цикла. Если нет - ничего делать не надо.
*/

/**
Дан массив с элементами 1, 2, 3, 4, 5, 6, 7, 8, 9. С помощью цикла for создайте строку '-1-2-3-4-5-6-7-8-9-'.
*/

/**
Составьте массив дней недели. С помощью цикла for выведите все дни недели, а выходные дни выведите жирным.
(Используйте браузер) <b></b>
*/

/**
Дано число n=1000. Делите его на 2 столько раз, пока результат деления не станет меньше 50. Какое число получится? Посчитайте количество итераций, необходимых для этого (итерация - это проход цикла), и запишите его в переменную num.
*/

/**
Дан массив с числами. Создайте новый массив, состоящий из квадратов этих чисел.
Используйте map
*/
/*
let num = [1, 2, 3, 4, 5];
let pownum = num.map((num) => { return Math.pow(num, 2) });
console.log(pownum);
*/

/**
Дан массив с числами. Оставьте в нем только отрицательные числа.
Используйте filter
*/

/**
Выведите квадрат содержимого инпута
(Используйте браузер)
*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/

/**

*/


(function f() {
    setTimeout(() => {
        console.log('1');
        ///

        setTimeout(() => {
            console.log('1');
            ///

            setTimeout(() => {
                console.log('1');
                ///

                setTimeout(() => {
                    console.log('1');
                    ///

                }, 1000);


            }, 1000);


        }, 1000);

    }, 1000);
}
)();

new Promise((res, rej) => {
    setTimeout(() => {
        console.log('1');
        ///
        res(ok);
    }, 1000);
})
    .then(() => {
        return new Promise((res, rej) => {
            setTimeout(() => {
                console.log('1');
                ///
                res(ok);
            }, 1000);
        })
    })
    .then(() => {
        return new Promise((res, rej) => {
            setTimeout(() => {
                console.log('1');
                ///
                res(ok);
            }, 1000);
        })
    })
    .then(() => {
        return new Promise((res, rej) => {
            setTimeout(() => {
                console.log('1');
                ///
                res(ok);
            }, 1000);
        })
    })
    .then(() => {
        return new Promise((res, rej) => {
            setTimeout(() => {
                console.log('1');
                ///
                res(ok);
            }, 1000);
        })
    })
    ;


